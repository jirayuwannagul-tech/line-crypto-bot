from __future__ import annotations
from typing import List, Dict, Iterable, Optional
import re

from app.services.news_fetcher import fetch_rss_many
from app.services.translator import smart_translate_to_thai

def _match_any_keyword(text: str, keywords: Iterable[str]) -> bool:
    t = (text or "").lower()
    for kw in keywords:
        k = kw.strip().lower()
        if not k:
            continue
        if k in t:
            return True
        # ‡∏•‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô/‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢ (‡∏Å‡∏±‡∏ô‡∏Ñ‡∏≥‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏£‡∏£‡∏Ñ)
        if re.search(rf"\b{re.escape(k)}\b", t):
            return True
    return False

def fetch_latest_news(limit_per_source: int = 3) -> List[Dict]:
    """
    ‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ú‡πà‡∏≤‡∏ô RSS (‡πÑ‡∏°‡πà‡∏û‡∏∂‡πà‡∏á‡∏û‡∏≤ paid API)
    ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô list ‡∏Ç‡∏≠‡∏á dict: {source, title, link, published}
    """
    return fetch_rss_many(limit_per_source=limit_per_source)

def build_news_message(
    max_items: int = 6,
    limit_per_source: int = 3,
    keywords: Optional[List[str]] = None,
    translate: bool = True,
) -> str:
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πà‡∏≤‡∏ß:
      - ‡∏Ñ‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î (‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î)
      - ‡πÅ‡∏õ‡∏•‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ó‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡∏ñ‡πâ‡∏≤ translate=True)
    """
    items = fetch_latest_news(limit_per_source=limit_per_source)

    # ‡∏Å‡∏£‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    filtered: List[Dict]
    if keywords:
        filtered = [it for it in items if _match_any_keyword(it.get("title",""), keywords)]
        # ‡∏ñ‡πâ‡∏≤‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏ß‡πà‡∏≤‡∏á ‡πÉ‡∏´‡πâ fallback ‡πÄ‡∏õ‡πá‡∏ô items ‡πÄ‡∏î‡∏¥‡∏° (‡∏Å‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏á)
        if not filtered:
            filtered = items
    else:
        filtered = items

    # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    lines = ["üì£ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"]
    for i, it in enumerate(filtered[:max_items], 1):
        title = it.get("title", "")
        if translate:
            try:
                title = smart_translate_to_thai(title)
            except Exception:
                # ‡∏ñ‡πâ‡∏≤‡πÅ‡∏õ‡∏•‡∏û‡∏±‡∏á ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
                pass
        src = it.get("source", "")
        link = it.get("link", "")
        lines.append(f"{i}. [{src}] {title} ‚Äî {link}")
    return "\n".join(lines)

# app/services/signal_service.py
# =============================================================================
# LAYER A) OVERVIEW
# -----------------------------------------------------------------------------
# ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢:
# - Service layer ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ SignalEngine ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
# - ‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà Jobs/Router ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
# - ‡πÅ‡∏¢‡∏Å concern: Engine = logic core, Service = orchestration/formatting
# =============================================================================

from __future__ import annotations
from typing import Dict, Any, Optional, List

import logging

from app.engine.signal_engine import build_signal_payload, build_line_text

logger = logging.getLogger(__name__)

# =============================================================================
# LAYER B) CORE SERVICE FUNCTIONS
# -----------------------------------------------------------------------------
# ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢:
# - ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ô layer ‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô abstraction ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢
# - ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡πÉ‡∏ô jobs (scheduler) ‡πÅ‡∏•‡∏∞ routers (LINE webhook)
# =============================================================================

def analyze_and_get_payload(
    symbol: str,
    tf: str,
    *,
    profile: Optional[str] = None,
    cfg: Optional[Dict[str, Any]] = None,
    xlsx_path: Optional[str] = None,
) -> Dict[str, Any]:
    """
    ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô payload ‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≤‡∏Å SignalEngine
    ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö jobs ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏•‡∏á DB
    """
    logger.debug(f"Analyzing {symbol} {tf} with profile={profile}")
    payload = build_signal_payload(symbol, tf, profile=profile, cfg=cfg, xlsx_path=xlsx_path)
    if not payload.get("ok"):
        logger.error(f"Signal error {symbol} {tf}: {payload.get('error')}")
    return payload


def analyze_and_get_text(
    symbol: str,
    tf: str,
    *,
    profile: Optional[str] = None,
    cfg: Optional[Dict[str, Any]] = None,
    xlsx_path: Optional[str] = None,
) -> str:
    """
    ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏±‡πâ‡∏ô (string) ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö push/reply LINE ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    """
    text = build_line_text(symbol, tf, profile=profile, cfg=cfg, xlsx_path=xlsx_path)
    return text

# app/engine/signal_engine.py

def build_line_text(
    symbol: str,
    tf: str,
    *,
    profile: Optional[str] = None,
    cfg: Optional[Dict[str, Any]] = None,
    xlsx_path: Optional[str] = None,
) -> str:
    payload = build_signal_payload(symbol, tf, profile=profile, cfg=cfg, xlsx_path=xlsx_path)

    if not payload.get("ok"):
        return f"‚ùå Error: {payload.get('error','unknown')}"

    sig = payload["signal"]
    probs = sig.get("probabilities", {})
    bias = sig.get("bias", "neutral")
    entry = sig.get("entry") or "-"
    sl    = sig.get("sl") or "-"
    tp    = sig.get("tp") or "-"
    last_price = sig.get("last_price", None)

    # ‡∏™‡∏£‡∏∏‡∏õ %UP/DOWN/SIDE
    up_p   = probs.get("up", 0) * 100
    down_p = probs.get("down", 0) * 100
    side_p = probs.get("side", 0) * 100

    lines = []
    header = f"üìä {symbol} {tf} ‚Äî ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì"
    if last_price:
        header += f"\n‡∏£‡∏≤‡∏Ñ‡∏≤: {last_price:,.2f} USDT"
    lines.append(header)
    lines.append(f"UP {up_p:.0f}% | DOWN {down_p:.0f}% | SIDE {side_p:.0f}%")
    lines.append("")
    lines.append(f"üéØ ‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (bias): {bias.upper()}")
    lines.append(f"‚Ä¢ Entry: {entry}")
    lines.append(f"‚Ä¢ SL: {sl}")
    lines.append(f"‚Ä¢ TP: {tp}")
    lines.append("")

    # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏à‡∏≤‡∏Å indicators/patterns (top 3)
    reasons = sig.get("reasons", [])[:3]
    if reasons:
        lines.append("‚ÑπÔ∏è ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏´‡∏•‡∏±‡∏Å:")
        for r in reasons:
            msg = r.get("message","")
            code = r.get("code","")
            lines.append(f"‚Ä¢ [{code}] {msg}")

    return "\n".join(lines)


# =============================================================================
# LAYER C) BATCH CONVENIENCE
# -----------------------------------------------------------------------------
# ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢:
# - ‡πÉ‡∏ä‡πâ‡∏£‡∏±‡∏ô‡∏´‡∏•‡∏≤‡∏¢ symbol/timeframe ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô (‡πÄ‡∏ä‡πà‡∏ô ‡πÉ‡∏ô job)
# - ‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏õ‡πá‡∏ô list ‡∏Ç‡∏≠‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
# =============================================================================

def analyze_batch(
    symbols: List[str],
    tfs: List[str],
    *,
    profile: Optional[str] = None,
    cfg: Optional[Dict[str, Any]] = None,
    xlsx_path: Optional[str] = None,
    as_text: bool = False,
) -> List[Any]:
    """
    ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏•‡∏≤‡∏¢ symbol/timeframe ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
    - ‡∏ñ‡πâ‡∏≤ as_text=True ‡∏Ñ‡∏∑‡∏ô list ‡∏Ç‡∏≠‡∏á string
    - ‡∏ñ‡πâ‡∏≤ as_text=False ‡∏Ñ‡∏∑‡∏ô list ‡∏Ç‡∏≠‡∏á payload dict
    """
    results: List[Any] = []
    for sym in symbols:
        for tf in tfs:
            if as_text:
                results.append(analyze_and_get_text(sym, tf, profile=profile, cfg=cfg, xlsx_path=xlsx_path))
            else:
                results.append(analyze_and_get_payload(sym, tf, profile=profile, cfg=cfg, xlsx_path=xlsx_path))
    return results

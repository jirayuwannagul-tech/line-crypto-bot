# app/utils/crypto_price.py
import os
import time
import asyncio
import re
import httpx
from typing import Optional, Dict, Tuple

# =============================================================================
# ENV & DEFAULTS
# =============================================================================
_DEFAULT_VS = os.getenv("QUOTE_ASSET", "USDT").upper()
_PROVIDER   = os.getenv("PRICE_PROVIDER", "binance").lower()  # binance|coingecko
_PRICE_TTL  = int(os.getenv("PRICE_TTL_SECONDS", "15"))
_BINANCE_HOSTS = [
    os.getenv("BINANCE_HOST", "https://api.binance.com"),
    "https://api1.binance.com",
    "https://api2.binance.com",
    "https://api3.binance.com",
    "https://data-api.binance.vision",
]

# ‡∏™‡∏Å‡∏∏‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠‡∏ö‡πà‡∏≠‡∏¢ (‡∏ñ‡πâ‡∏≤ user ‡πÉ‡∏™‡πà‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢)
_KNOWN_VS = {"USDT", "USD", "BUSD", "USDC", "BTC", "ETH"}

_price_cache: Dict[str, Tuple[float, float]] = {}


# =============================================================================
# CACHE
# =============================================================================
def _cache_key(symbol: str, vs: str) -> str:
    return f"{symbol.upper()}-{vs.upper()}"

def _get_cached(symbol: str, vs: str) -> Optional[float]:
    row = _price_cache.get(_cache_key(symbol, vs))
    if not row:
        return None
    price, ts = row
    return price if (time.time() - ts) <= _PRICE_TTL else None

def _set_cache(symbol: str, vs: str, price: float) -> None:
    _price_cache[_cache_key(symbol, vs)] = (price, time.time())


# =============================================================================
# PROVIDERS
# =============================================================================
async def _get_price_binance(symbol: str, vs: str) -> Optional[float]:
    """
    ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å Binance: /api/v3/ticker/price?symbol=BTCUSDT
    symbol = base (BTC), vs = quote (USDT)
    """
    pair = f"{symbol.upper()}{vs.upper()}"
    params = {"symbol": pair}
    headers = {"User-Agent": "line-crypto-bot/1.0"}
    backoffs = [0.5, 1.0]

    for base in _BINANCE_HOSTS:
        url = f"{base.rstrip('/')}/api/v3/ticker/price"
        for wait in [0.0] + backoffs:
            if wait:
                await asyncio.sleep(wait)
            try:
                async with httpx.AsyncClient(timeout=10) as client:
                    r = await client.get(url, params=params, headers=headers)
            except httpx.RequestError:
                continue
            if r.status_code == 200:
                try:
                    j = r.json()
                    return float(j["price"])
                except Exception:
                    break  # response ‡πÅ‡∏õ‡∏•‡∏Å ‡πÜ ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á host ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            # ‡∏ñ‡πâ‡∏≤ client ‡∏™‡πà‡∏á‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ 400/404/403/451 ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á retry host ‡πÄ‡∏î‡∏¥‡∏°
            if r.status_code in (400, 403, 404, 451):
                break
            if r.status_code == 429:
                # rate limit ‚Üí ‡∏•‡∏≠‡∏á backoff ‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÑ‡∏î‡πâ
                continue
            break
    return None

async def _get_price_coingecko(symbol: str, vs: str) -> Optional[float]:
    """
    ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å Coingecko ‡πÅ‡∏ö‡∏ö simple price (fallback)
    ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°‡∏ï‡∏≤‡∏° SYMBOL_MAP
    """
    vs_currency = "usd" if vs.upper() in ("USD", "USDT") else vs.lower()
    SYMBOL_MAP = {
        "BTC": "bitcoin", "ETH": "ethereum", "BNB": "binancecoin",
        "ADA": "cardano", "XRP": "ripple", "SOL": "solana",
        "DOGE": "dogecoin", "SAND": "the-sandbox",
    }
    coin_id = SYMBOL_MAP.get(symbol.upper())
    if not coin_id:
        return None
    url = "https://api.coingecko.com/api/v3/simple/price"
    try:
        async with httpx.AsyncClient(timeout=10) as client:
            r = await client.get(url, params={"ids": coin_id, "vs_currencies": vs_currency})
        if r.status_code != 200:
            return None
        data = r.json()
        val = data.get(coin_id, {}).get(vs_currency)
        return float(val) if val is not None else None
    except Exception:
        return None


# =============================================================================
# CORE PRICE API
# =============================================================================
async def get_price(symbol: str, vs: str | None = None) -> Optional[float]:
    """
    ‡∏Ñ‡∏∑‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏π‡πà (symbol/vs) ‡πÄ‡∏ä‡πà‡∏ô (BTC, USDT) ‚Üí 12345.67
    """
    vs = (vs or _DEFAULT_VS).upper()
    cached = _get_cached(symbol, vs)
    if cached is not None:
        return cached

    order = [_PROVIDER, "coingecko" if _PROVIDER == "binance" else "binance"]
    price: Optional[float] = None
    for prov in order:
        if prov == "binance":
            price = await _get_price_binance(symbol, vs)
        elif prov == "coingecko":
            price = await _get_price_coingecko(symbol, vs)
        if price is not None:
            break

    if price is not None:
        _set_cache(symbol, vs, price)
    return price

async def get_price_text(symbol: str, vs: str | None = None) -> str:
    """
    ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏´‡∏ô‡πà‡∏ß‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô "üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤ BTC ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: 12,345.67 USD"
    """
    vs = (vs or _DEFAULT_VS).upper()
    price = await get_price(symbol, vs)
    if price is None:
        return f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤ {symbol.upper()}/{vs}"
    unit = "USD" if vs in ("USD", "USDT") else vs
    return f"üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤ {symbol.upper()} ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {price:,.2f} {unit}"

# --- compat (async) ---
async def get_price_usd(symbol: str) -> Optional[float]:
    return await get_price(symbol, "USDT")


# =============================================================================
# SYNC WRAPPERS (‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡πÉ‡∏ä‡πâ‡πÉ‡∏ô FastAPI handlers)
# =============================================================================
def fetch_price_text(symbol: str, vs: str | None = None) -> str:
    """
    sync wrapper ‚Üí ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô webhook ‡πÑ‡∏î‡πâ
    """
    try:
        return asyncio.run(get_price_text(symbol, vs))
    except RuntimeError:
        # ‡∏ñ‡πâ‡∏≤ event loop ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà (‡πÄ‡∏ä‡πà‡∏ô‡πÉ‡∏ô FastAPI) ‚Üí ‡πÉ‡∏ä‡πâ run_until_complete
        loop = asyncio.get_event_loop()
        return loop.run_until_complete(get_price_text(symbol, vs))


# =============================================================================
# TEXT PARSER & AUTO API (‡πÉ‡∏´‡∏°‡πà)  ‚Üê ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡πá‡πÑ‡∏î‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤
# =============================================================================
_SYMBOL_RE = re.compile(r"^[A-Za-z0-9]{2,20}$")

def _split_pair_token(token: str) -> Tuple[str, Optional[str]]:
    """
    ‡πÅ‡∏¢‡∏Å token ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á ‡πÜ ‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ (base, vs?)
    ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
      "BTCUSDT"  -> ("BTC", "USDT")
      "ETHUSD"   -> ("ETH", "USD")
      "ADA"      -> ("ADA", None)       # ‡πÑ‡∏°‡πà‡∏°‡∏µ vs ‚Üí ‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡πÄ‡∏ï‡∏¥‡∏° default ‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á
    ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢: ‡∏ñ‡πâ‡∏≤ token ‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ vs ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å ‚Üí ‡∏ï‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô vs
    """
    s = token.upper()
    for vs in sorted(_KNOWN_VS, key=len, reverse=True):  # ‡πÄ‡∏ä‡πá‡∏Å‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡∏Å‡πà‡∏≠‡∏ô
        if s.endswith(vs) and len(s) > len(vs):
            base = s[: -len(vs)]
            return base, vs
    return s, None

def resolve_symbol_vs_from_text(text: str, default_vs: Optional[str] = None) -> Optional[Tuple[str, str]]:
    """
    ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏¥‡∏™‡∏£‡∏∞ ‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ï‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô (symbol, vs)
    ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö:
      - "sol" / "btc"                  ‚Üí (SOL, USDT)
      - "BTCUSDT" / "ETHUSD"           ‚Üí (BTC, USDT) / (ETH, USD)
      - "btc/usdt", "eth:usdt"         ‚Üí (BTC, USDT)
      - "ada busd" (‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á)        ‚Üí (ADA, BUSD)
    ‡∏Ñ‡∏∑‡∏ô None ‡∏ñ‡πâ‡∏≤‡∏î‡∏π‡πÑ‡∏°‡πà‡∏≠‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå
    """
    if not text:
        return None

    default_vs = (default_vs or _DEFAULT_VS).upper()
    t = text.strip().upper()

    # ‡∏ï‡∏±‡∏î‡∏Ñ‡∏±‡πà‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
    for sep in ("/", ":", "-", " "):
        if sep in t:
            parts = [p for p in t.replace(sep, " ").split() if p]
            if len(parts) == 1:
                # ‡πÄ‡∏ä‡πà‡∏ô "BTC/  " ‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô ["BTC"] ‚Üí ‡∏•‡∏á‡πÑ‡∏õ‡πÉ‡∏ä‡πâ logic ‡∏Ç‡πâ‡∏≤‡∏á‡∏•‡πà‡∏≤‡∏á
                t = parts[0]
                break
            if len(parts) >= 2:
                base = parts[0]
                vs = parts[1]
                if vs not in _KNOWN_VS:
                    # ‡∏ñ‡πâ‡∏≤ user ‡∏û‡∏¥‡∏°‡∏û‡πå base ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÄ‡∏ä‡πà‡∏ô "BTC /" ‡πÉ‡∏´‡πâ‡πÄ‡∏ï‡∏¥‡∏° default
                    return (base, default_vs)
                return (base, vs)

    # ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    if _SYMBOL_RE.fullmatch(t):
        base, vs = _split_pair_token(t)  # ‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏π‡πà‡πÅ‡∏ö‡∏ö BTCUSDT ‚Üí BTC/USDT
        return (base, vs or default_vs)

    return None

def fetch_price_text_auto(text: str, default_vs: Optional[str] = None) -> str:
    """
    one-call API: ‡∏¢‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏∞‡πÑ‡∏£‡∏°‡∏≤‡∏Å‡πá‡πÑ‡∏î‡πâ ‚Üí ‡∏Ñ‡∏∑‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö input ‡∏≠‡∏¢‡πà‡∏≤‡∏á "sol", "ethusdt", "btc/usdt", "avax:usdt", "doge"
    """
    parsed = resolve_symbol_vs_from_text(text, default_vs=default_vs)
    if not parsed:
        return "‚ùå ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏ä‡πà‡∏ô: sol, btcusdt, btc/usdt"
    base, vs = parsed
    return fetch_price_text(base, vs)


# =============================================================================
# NO-OP RESOLVER (‡πÄ‡∏î‡∏¥‡∏°)
# =============================================================================
class _NoopResolver:
    async def refresh(self, force: bool = False) -> bool:
        return True

resolver = _NoopResolver()

# app/routers/line_webhook.py
from __future__ import annotations

import os
import re
from typing import Optional

from fastapi import APIRouter, Request, HTTPException
from fastapi.responses import PlainTextResponse

from app.features.replies.keyword_reply import (
    get_reply,
    parse_price_command,
    parse_analysis_mock,
    parse_analyze_command,
)

# ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏£‡∏¥‡∏á
from app.analysis.timeframes import get_data
from app.analysis.scenarios import analyze_scenarios

# ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤ (‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö background loop ‡∏ó‡∏µ‡πà start ‡πÉ‡∏ô app/main.py)
from app.features.alerts.price_reach import add_watch, remove_watch

# LINE SDK v3
from linebot.v3.messaging import (
    Configuration,
    ApiClient,
    MessagingApi,
    ReplyMessageRequest,
    TextMessage as LineTextMessage,
)
from linebot.v3.webhooks import (
    MessageEvent,
    TextMessageContent,
)
from linebot.v3.webhook import WebhookHandler
from linebot.v3.exceptions import InvalidSignatureError

router = APIRouter()

# ====== ENV ======
CHANNEL_SECRET = os.getenv("LINE_CHANNEL_SECRET", "")
CHANNEL_ACCESS_TOKEN = os.getenv("LINE_CHANNEL_ACCESS_TOKEN", "")

if not CHANNEL_SECRET or not CHANNEL_ACCESS_TOKEN:
    # ‡πÉ‡∏´‡πâ error ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏ï‡∏≠‡∏ô‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó
    missing = []
    if not CHANNEL_SECRET:
        missing.append("LINE_CHANNEL_SECRET")
    if not CHANNEL_ACCESS_TOKEN:
        missing.append("LINE_CHANNEL_ACCESS_TOKEN")
    raise RuntimeError(f"Missing ENV: {', '.join(missing)}")

# ====== LINE Handler ======
handler = WebhookHandler(CHANNEL_SECRET)

# ====== ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡∏±‡πâ‡∏á/‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤ ======
_WATCH_SET = re.compile(
    r"^(?:‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏Ç‡πâ‡∏≤|watch)\s+([A-Za-z0-9:/._-]+)\s+([0-9]+(?:\.[0-9]+)?)(?:\s+tol=(\d+(?:\.\d+)?))?$",
    re.IGNORECASE,
)
_WATCH_DEL = re.compile(
    r"^(?:‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤|unwatch)\s+([A-Za-z0-9:/._-]+)$",
    re.IGNORECASE,
)

# ====== ‡∏û‡∏≤‡∏£‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå ======
_ANALYZE_TH = re.compile(
    r"^(?:‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå|analyze)\s+([A-Za-z0-9:/._-]+)(?:\s+([0-9]+[mMhHdDwW]|[124]H|1D|4H|1W|15m|30m|60m|1‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á|4‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á|1‡∏ß‡∏±‡∏ô|1‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå))?$",
    re.IGNORECASE,
)

def _quick_parse_analyze(text: str):
    """
    ‡∏£‡∏±‡∏ö: "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå BTC", "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå BTCUSDT 4H", "analyze btc 1D", "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå BTC 1‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á"
    ‡∏Ñ‡∏∑‡∏ô: (symbol_norm, tf_norm) ‡∏´‡∏£‡∏∑‡∏≠ None
    ‡∏î‡∏µ‡∏ü‡∏≠‡∏•‡∏ï‡πå: symbol=BTCUSDT ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ 'BTC', tf=1D ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏
    """
    m = _ANALYZE_TH.match(text.strip())
    if not m:
        return None
    sym_raw = m.group(1)
    tf_raw  = (m.group(2) or "").strip()
    symbol = _norm_symbol(sym_raw)
    if symbol in ("BTC", "XBT"):
        symbol = "BTCUSDT"
    tf_map = {
        "1H":"1H", "4H":"4H", "1D":"1D", "1W":"1W",
        "1‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á":"1H", "4‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á":"4H", "1‡∏ß‡∏±‡∏ô":"1D", "1‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå":"1W",
        "15M":"15m", "30M":"30m", "60M":"1H",
        "15m":"15m", "30m":"30m",
    }
    tf = tf_map.get(tf_raw.upper(), "1D") if tf_raw else "1D"
    return (symbol, tf)

def _norm_symbol(s: str) -> str:
    return s.upper().replace(":", "").replace("/", "")

def _reply_text(api: MessagingApi, reply_token: str, text: str) -> None:
    # ‡∏Å‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô 5000
    if text and len(text) > 4900:
        text = text[:4900] + "\n[truncated]"
    api.reply_message(
        ReplyMessageRequest(
            replyToken=reply_token,
            messages=[LineTextMessage(text=text)],
        )
    )

def fmt_num(val) -> str:
    """‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢"""
    try:
        x = float(val)
    except (TypeError, ValueError):
        return "-"
    if abs(x) >= 1000:
        return f"{x:,.2f}"
    if abs(x) >= 1:
        return f"{x:.4f}"
    return f"{x:.6f}"

def _handle_price_sync(symbol: str) -> str:
    """
    ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô synchronous (‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á await ‡πÉ‡∏ô handler ‡∏Ç‡∏≠‡∏á LINE)
    """
    try:
        from app.adapters.price_provider import get_price  # type: ignore
        import inspect, asyncio
        if inspect.iscoroutinefunction(get_price):
            try:
                # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏£‡∏±‡∏ô‡πÅ‡∏ö‡∏ö‡πÅ‡∏¢‡∏Å event loop
                px = asyncio.run(get_price(symbol))
            except RuntimeError:
                # ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô event loop ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ fallback ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°
                return f"‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤ {symbol} (provider ‡πÄ‡∏õ‡πá‡∏ô async ‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏ä‡πâ‡∏ú‡πà‡∏≤‡∏ô endpoint)"
        else:
            px = get_price(symbol)
        if px is not None:
            return f"üìà {symbol}\n‡∏£‡∏≤‡∏Ñ‡∏≤: {fmt_num(px)}"
    except Exception:
        pass
    return f"‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤ {symbol} (‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö PRICE_PROVIDER ‡∏´‡∏£‡∏∑‡∏≠ provider function)."

# ====== LINE Event Handlers ======
@handler.add(MessageEvent, message=TextMessageContent)
def on_message(event: MessageEvent):
    user_text = (event.message.text or "").strip()
    user_id = getattr(event.source, "user_id", None)

    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° client ‡∏£‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    config = Configuration(access_token=CHANNEL_ACCESS_TOKEN)
    with ApiClient(config) as api_client:
        api = MessagingApi(api_client)

        # 0.5) ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏£‡∏¥‡∏á (‡∏ó‡∏≥‡∏Å‡πà‡∏≠‡∏ô get_reply ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÇ‡∏î‡∏ô‡∏Å‡∏•‡∏∑‡∏ô)
        parsed = _quick_parse_analyze(user_text) or parse_analyze_command(user_text)
        if parsed:
            symbol, tf = parsed
            try:
                df = get_data(symbol, tf)
                result = analyze_scenarios(df, symbol=symbol, tf=tf)

                pct = result.get("percent", {}) or {}
                lv = result.get("levels", {}) or {}
                fib = lv.get("fibo", {}) or {}
                el = lv.get("elliott_targets", {}) or {}

                reply = (
                    f"üîé ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå {symbol} | TF: {tf}\n"
                    f"‚Ä¢ ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°: UP {pct.get('up',0)}% | DOWN {pct.get('down',0)}% | SIDE {pct.get('side',0)}%\n"
                    f"‚Ä¢ Key Levels:\n"
                    f"   - Swing High: {fmt_num(lv.get('recent_high'))}\n"
                    f"   - Swing Low : {fmt_num(lv.get('recent_low'))}\n"
                    f"   - EMA50/200: {fmt_num(lv.get('ema50'))} / {fmt_num(lv.get('ema200'))}\n"
                    f"   - Fibo 0.618 / 1.618: {fmt_num(fib.get('retr_0.618'))} / {fmt_num(fib.get('ext_1.618'))}\n"
                    + (f"   - Elliott targets: {', '.join(f'{k}:{fmt_num(v)}' for k,v in el.items())}\n" if el else "")
                )
            except FileNotFoundError:
                reply = "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: app/data/historical.xlsx"
            except ValueError as e:
                reply = f"‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°: {e}"
            except Exception as e:
                reply = f"‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: {e}"

            _reply_text(api, event.reply_token, reply)
            return

        # 0) ‡∏ï‡∏±‡πâ‡∏á/‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤ (watch / unwatch)
        m = _WATCH_SET.match(user_text)
        if user_id and m:
            sym = _norm_symbol(m.group(1))
            entry = float(m.group(2))
            tol = float(m.group(3)) if m.group(3) else 0.0
            add_watch(user_id, sym, entry, tol)
            _reply_text(
                api,
                event.reply_token,
                f"‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô {sym}\n‚Ä¢ Entry: {fmt_num(entry)}\n‚Ä¢ Tol: ¬±{fmt_num(tol)}",
            )
            return

        m = _WATCH_DEL.match(user_text)
        if user_id and m:
            sym = _norm_symbol(m.group(1))
            ok = remove_watch(user_id, sym)
            _reply_text(
                api,
                event.reply_token,
                f"{'üóëÔ∏è ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å' if ok else '‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö'} ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô {sym}",
            )
            return

        # 1) ‡πÅ‡∏°‡∏û‡∏õ‡∏¥‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
        mapped = get_reply(user_text)
        if mapped:
            _reply_text(api, event.reply_token, mapped)
            return

        # 2) ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤: "‡∏£‡∏≤‡∏Ñ‡∏≤ BTC" / "price eth"
        symbol_price = parse_price_command(user_text)
        if symbol_price:
            price_text = _handle_price_sync(symbol_price)
            _reply_text(api, event.reply_token, price_text)
            return

        # 3) ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á mock: "mock" / "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå mock"
        if parse_analysis_mock(user_text):
            mock_text = (
                "üß™ MOCK ANALYSIS\n"
                "UP 40% | DOWN 35% | SIDE 25%\n"
                "Key Levels:\n"
                " - SwingH: 60,500\n - SwingL: 58,200\n"
                " - EMA50/200: 59,800 / 57,900\n"
                " - Fibo 0.618 / 1.618: 59,200 / 61,400\n"
                "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"
            )
            _reply_text(api, event.reply_token, mock_text)
            return

        # 5) ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÉ‡∏î ‡πÜ ‚Üí ‡∏™‡πà‡∏á‡∏ï‡∏±‡∏ß‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        helper = (
            "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö üëã ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á:\n"
            "‚Ä¢ ‡∏£‡∏≤‡∏Ñ‡∏≤ BTC\n"
            "‚Ä¢ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå BTCUSDT 1H\n"
            "‚Ä¢ ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏Ç‡πâ‡∏≤ BTCUSDT 60000 (‡∏´‡∏£‡∏∑‡∏≠ watch btc 60000 tol=50)\n"
            "‚Ä¢ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤ BTCUSDT (‡∏´‡∏£‡∏∑‡∏≠ unwatch btc)\n"
            "‚Ä¢ mock"
        )
        _reply_text(api, event.reply_token, helper)


# NOTE: main.py include_router(..., prefix="/line")
# ‡∏î‡∏±‡∏á‡∏ô‡∏±‡πâ‡∏ô path ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÉ‡∏ä‡πâ "/webhook" ‡πÉ‡∏´‡πâ‡∏•‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏õ‡πá‡∏ô /line/webhook
@router.post("/webhook")
async def line_webhook(request: Request):
    """
    LINE webhook entrypoint (‡πÉ‡∏ä‡πâ WebhookHandler ‡∏Ç‡∏≠‡∏á SDK v3)
    """
    signature = request.headers.get("x-line-signature")
    if not signature:
        raise HTTPException(status_code=400, detail="Missing X-Line-Signature")

    body_bytes = await request.body()
    body_text = body_bytes.decode("utf-8")

    try:
        handler.handle(body_text, signature)
    except InvalidSignatureError:
        raise HTTPException(status_code=401, detail="Invalid signature")

    return PlainTextResponse("OK")

# app/routers/line_webhook.py
import json
import logging
import re
from fastapi import APIRouter, Header, HTTPException, Request

from app.utils.settings import settings
from app.adapters.line.client import verify_signature, reply_message
from app.utils.crypto_price import get_price_text

router = APIRouter()
logger = logging.getLogger(__name__)

# ‡∏ó‡∏≤‡∏á‡∏•‡∏±‡∏î: ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏™‡∏±‡πâ‡∏ô ‡πÜ ‡πÅ‡∏Ñ‡πà‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå (‡∏Å‡∏±‡∏ô‡∏™‡πÅ‡∏õ‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ)
WHITELIST = {"BTC","ETH","SOL","BNB","XRP","ADA","DOGE","AVAX","DOT","TON"}
GREETINGS = {"‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ", "‡∏î‡∏µ‡∏î‡∏µ", "‡∏î‡∏µ‡∏à‡πâ‡∏≤", "hello", "hi"}

@router.get("/webhook")
def webhook_verify():
    return {"status": "ok"}

@router.post("/webhook")
async def line_webhook(
    request: Request,
    x_line_signature: str | None = Header(default=None, alias="X-Line-Signature"),
):
    # ‡∏ï‡∏£‡∏ß‡∏à config ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ
    settings.validate_line()

    # body + signature
    body = await request.body()
    if not x_line_signature:
        raise HTTPException(status_code=400, detail="Missing X-Line-Signature")
    if not verify_signature(settings.LINE_CHANNEL_SECRET, body, x_line_signature):
        raise HTTPException(status_code=400, detail="Invalid signature")

    # parse events
    try:
        data = json.loads(body.decode("utf-8"))
    except Exception:
        raise HTTPException(status_code=400, detail="Invalid JSON body")

    events = data.get("events", [])
    for ev in events:
        if ev.get("type") != "message":
            continue
        if ev.get("message", {}).get("type") != "text":
            continue

        reply_token = ev.get("replyToken")
        if not reply_token:
            continue

        text = (ev.get("message", {}).get("text") or "").strip()
        upper = text.upper()

        # ---------- "‡∏£‡∏≤‡∏Ñ‡∏≤ <SYMBOL>" (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç) ----------
        m = re.search(r"‡∏£‡∏≤‡∏Ñ‡∏≤\s+([A-Za-z0-9._\-]+)", text, flags=re.IGNORECASE)
        if m:
            sym = m.group(1).upper()
            try:
                msg = await get_price_text(sym)
            except Exception as e:
                logger.exception("price fetch failed: %s", e)
                msg = f"‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤ {sym} ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏Ñ‡∏£‡∏±‡∏ö üôè"
            await reply_message(reply_token, [{"type": "text", "text": msg}])
            continue

        # ---------- ‡∏Å‡∏±‡∏ô‡πÄ‡∏Ñ‡∏™‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô "‡∏£‡∏≤‡∏Ñ‡∏≤" ‡πÅ‡∏ï‡πà‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏µ‡πâ‡∏¢‡∏ô ----------
        if text.lower().startswith("‡∏£‡∏≤‡∏Ñ‡∏≤"):
            parts = text.split()
            if len(parts) >= 2:
                sym = parts[-1].upper()
                try:
                    msg = await get_price_text(sym)
                except Exception as e:
                    logger.exception("price fetch failed: %s", e)
                    msg = f"‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤ {sym} ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏Ñ‡∏£‡∏±‡∏ö üôè"
                await reply_message(reply_token, [{"type": "text", "text": msg}])
                continue

        # ---------- ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏™‡∏±‡πâ‡∏ô ‡πÜ ‡πÅ‡∏Ñ‡πà‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå (whitelist) ----------
        if upper in WHITELIST:
            try:
                msg = await get_price_text(upper)
            except Exception as e:
                logger.exception("price fetch failed: %s", e)
                msg = f"‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤ {upper} ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏Ñ‡∏£‡∏±‡∏ö üôè"
            await reply_message(reply_token, [{"type": "text", "text": msg}])
            continue

        # ---------- ‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢ ----------
        if text.strip().lower() in {g.lower() for g in GREETINGS}:
            await reply_message(reply_token, [{"type": "text", "text": "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö üôè"}])
            continue

        # ---------- default help ----------
        help_msg = "‡∏û‡∏¥‡∏°‡∏û‡πå: ‡∏£‡∏≤‡∏Ñ‡∏≤ BTC | ‡∏£‡∏≤‡∏Ñ‡∏≤ ETH | ‡∏£‡∏≤‡∏Ñ‡∏≤ SOL (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ö‡∏ô CoinGecko)"
        await reply_message(reply_token, [{"type": "text", "text": help_msg}])

    return {"status": "ok", "events": len(events)}

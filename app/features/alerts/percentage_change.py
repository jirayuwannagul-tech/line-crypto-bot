"""
app/features/alerts/percentage_change.py
----------------------------------------
‡πÄ‡∏•‡πÄ‡∏¢‡∏≠‡∏£‡πå: features/alerts
‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì % ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤ ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏£‡∏Å‡∏∞ hysteresis ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö state_store (baseline/last_state/last_alert_ts) ‡πÅ‡∏•‡∏∞ scheduler ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
"""

from typing import Dict  # ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ Dict ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô


def compute_pct_change(current_price: float, baseline_price: float) -> float:
    """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å baseline
    ‡∏™‡∏π‡∏ï‡∏£: ((current - baseline) / baseline) * 100
    ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: baseline ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ö‡∏ß‡∏Å‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô 0
    """
    if baseline_price is None or baseline_price == 0:  # ‡∏Å‡∏±‡∏ô‡∏Å‡∏£‡∏ì‡∏µ baseline ‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏®‡∏π‡∏ô‡∏¢‡πå
        raise ValueError("baseline_price must be a non-zero number")  # ‡πÅ‡∏à‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
    return ((current_price - baseline_price) / baseline_price) * 100.0  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ % ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á


def crossed_threshold(pct_change: float, threshold_pct: float) -> bool:
    """‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡πÅ‡∏ï‡∏∞/‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á (‡πÄ‡∏ä‡πà‡∏ô 5%)
    ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ absoluted value ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏™‡∏ô‡πÉ‡∏à‡∏ó‡∏±‡πâ‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏•‡∏á
    """
    return abs(pct_change) >= threshold_pct  # ‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö threshold


def should_rearm_after_alert(pct_change: float, threshold_pct: float, hysteresis_pct: float) -> bool:
    """‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß (state=idle) ‡∏ï‡πâ‡∏≠‡∏á ‚Äú‡∏ñ‡∏≠‡∏¢‡∏Å‡∏•‡∏±‡∏ö‚Äù ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏ô‡πÇ‡∏ã‡∏ô‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∂‡∏á‡∏à‡∏∞ re-arm
    ‡∏ô‡∏¥‡∏¢‡∏≤‡∏°‡πÇ‡∏ã‡∏ô‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢: |pct_change| <= (threshold_pct - hysteresis_pct)
    ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: threshold=5, hysteresis=1 ‚áí ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÄ‡∏°‡∏∑‡πà‡∏≠ |pct| <= 4
    """
    safe_band = max(threshold_pct - hysteresis_pct, 0.0)  # ‡∏Å‡∏±‡∏ô‡∏Ñ‡πà‡∏≤‡∏ï‡∏¥‡∏î‡∏•‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏ï‡∏±‡πâ‡∏á hysteresis ‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô
    return abs(pct_change) <= safe_band  # ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ã‡∏ô‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏à‡∏∂‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏° re-arm


def evaluate_percentage_alert(
    current_price: float,
    baseline_price: float,
    threshold_pct: float,
    hysteresis_pct: float,
    last_state: str,
) -> Dict[str, object]:
    """‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå + hysteresis (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° cooldown)
    ‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°:
      - ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ 'armed' ‡πÅ‡∏•‡∏∞ |pct| >= threshold ‚áí ready_to_alert = True
      - ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ 'idle' ‡∏à‡∏∞ re-arm ‡πÄ‡∏°‡∏∑‡πà‡∏≠ |pct| <= (threshold - hysteresis)
    ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤:
      {
        'pct_change': float,        # % ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        'crossed': bool,            # ‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        'ready_to_alert': bool,     # ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏¢‡∏¥‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏ä‡πá‡∏Ñ cooldown)
        'new_state': 'armed'|'idle' # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà (‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô hysteresis)
      }
    """
    pct = compute_pct_change(current_price, baseline_price)  # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì % ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å baseline
    crossed = crossed_threshold(pct, threshold_pct)  # ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≤‡∏° threshold ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á

    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°
    new_state = last_state  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°
    ready_to_alert = False  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô

    if last_state == "armed":  # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á armed ‡∏≠‡∏¢‡∏π‡πà
        if crossed:  # ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÅ‡∏•‡πâ‡∏ß
            ready_to_alert = True  # ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (‡∏™‡πà‡∏ß‡∏ô cooldown ‡πÑ‡∏õ‡πÄ‡∏ä‡πá‡∏Ñ‡πÉ‡∏ô state_store/scheduler)
            new_state = "idle"  # ‡∏¢‡∏¥‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡∏™‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô idle (‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ñ‡∏≠‡∏¢‡πÄ‡∏Ç‡πâ‡∏≤ hysteresis ‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡πà‡∏≠‡∏¢ armed ‡πÉ‡∏´‡∏°‡πà)
    else:  # ‡∏Å‡∏£‡∏ì‡∏µ last_state == "idle"
        if should_rearm_after_alert(pct, threshold_pct, hysteresis_pct):  # ‡∏ñ‡∏≠‡∏¢‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏ã‡∏ô‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
            new_state = "armed"  # ‡∏ñ‡πâ‡∏≤‡∏ñ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ armed ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏£‡∏≠‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ

    return {
        "pct_change": pct,  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ % ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
        "crossed": crossed,  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        "ready_to_alert": ready_to_alert,  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° cooldown)
        "new_state": new_state,  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà
    }


# ===== üß™ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ (manual) =====
# python3 -c "from app.features.alerts.percentage_change import evaluate_percentage_alert; print(evaluate_percentage_alert(63000, 60000, 5, 1, 'armed'))"
# ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á:
# - baseline=60000 ‚Üí current=63000 ‚áí pct_change = +5.0%
# - last_state='armed' ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏Å‡∏ì‡∏ë‡πå 5% ‚áí ready_to_alert=True, new_state='idle'
#
# ‚úÖ Acceptance:
# - ‡πÄ‡∏°‡∏∑‡πà‡∏≠ current ‡∏Ç‡∏¢‡∏±‡∏ö ‚â• ¬±threshold ‡∏à‡∏≤‡∏Å baseline ‡πÅ‡∏•‡∏∞ last_state='armed' ‚áí ready_to_alert=True, new_state='idle'
# - ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà 'idle' ‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏≤‡∏Ñ‡∏≤ ‚Äú‡∏ñ‡∏≠‡∏¢‡∏Å‡∏•‡∏±‡∏ö‚Äù ‡∏à‡∏ô |pct| <= threshold-hysteresis ‚áí new_state ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô 'armed'
# - ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÇ‡∏¢‡∏ô exception ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥ (baseline > 0) ‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏™‡∏π‡∏ï‡∏£

"""
Layer สำหรับ mapping คีย์เวิร์ด → คำตอบ
- KEYWORD_MAP  : เก็บ mapping คีย์เวิร์ดแบบ fix เช่น "สวัสดี" → "ทักควยไรวะ 🤔"
- get_reply()  : ถ้าข้อความตรงกับ key ใน KEYWORD_MAP → ส่งข้อความตอบกลับ
- parse_price_command() : ตรวจจับคำสั่ง "ราคา XXX" / "price XXX" → คืน symbol เช่น BTCUSDT
"""

from typing import Optional
import re

# === Keyword mapping (ข้อความโต้ตอบทั่วไป) ===
KEYWORD_MAP = {
    # ===== ชุดทักทายกวนๆ =====
    "สวัสดี": "ทักควยไรวะ 🤔",
    "หวัดดี": "ไหว้พ่อมึงเถอะ 😂",
    "เฮโหล": "ฮัลโหล~ ได้ยินแต่ไม่เห็นหน้า 😏",
    "ไง": "หรือจะเอา 😜",
    "ฮัลโหล": "กุคนไทย ",
    "ดีจ้า": "ดีย์... แบบมีสไตล์ ✌️",
    "ดีครับ": "ดีครับ... ตังค์มีป่ะยืมหน่อย 💸",
    "ดีค่ะ": "ดีค่ะ... แต่ถ้าเลี้ยงข้าวจะดีกว่า 🤭",
    "ว่าไง": "ว่าไงล่ะ... มีเรื่องจะเล่า หรือจะยืมเงิน 😏",
    "เป็นไงบ้าง": "ก็ยังหายใจอยู่นะ ขอบคุณที่ถาม 😅",
    "อรุณสวัสดิ์": "อรุณสวัสดิ์... แต่ยังไม่อยากตื่นเลย 😴",
    "สวัสดีตอนเช้า": "เช้าที่ดี... คือเช้าที่ไม่ต้องทำงาน ☕️",
    "สวัสดีตอนบ่าย": "บ่ายนี้ขอแค่นอนก็พอ 😪",
    "สวัสดีตอนเย็น": "เย็นนี้กินไรดี? อย่าบอกนะว่ามาม่า 🍜",
    "ราตรีสวัสดิ์": "ฝันดี... แต่ถ้าเจอผีอย่าโทษเรานะ 👻",
    "กูมาแล้ว": "เอ้า! ก็มาดิครับ 🔥",
    "มาแล้ว": "มาแล้วก็อย่ามือเปล่า ของฝากล่ะ 🤨",
    "โย่ว": "โย่วๆๆ... คิดว่าตัวเองเป็นแร็ปเปอร์ปะ 🎤",
    "โอเค": "โอเค... แต่ใจยังไม่โอเคนะ 💔",

    # ===== ชุด BTC/การพนันกวนๆ =====
    "btc": "BTC นี่มันคาสิโนชัด ๆ 🎰",
    "เปิดลอค": "เปิดลอคทีไร เจ๊งทุกที 😭",
    "เปิดชอท": "เปิดชอทปุ๊บ... แท่งเขียวทะลุจอ 🟢",
    "sl": "SL โดนกินเรียบร้อย... น้ำตาจะไหล 💦",
    "tp": "TP โดนเฉียด ๆ แล้วเด้งกลับ เจ็บจี๊ด 😤",
    "ติดดอย": "ดอยสูงขนาดนี้ ออกซิเจนเริ่มไม่พอแล้ว 🏔️",
    "ตกรถ": "รถคันนี้ไม่มีเบาะเสริมแล้วน้อง 🤣",
    "ตามพี่": "อย่าตามพี่เลย... พี่เองก็ติดดอยอยู่ 😅",
    "เลิกเทรด": "เลิกไม่ได้หรอก มันคือความบันเทิง 🎢",
    "เจ๊ง": "เจ๊งอีกแล้ว... ฝากตังค์เพิ่มได้ปะ 💸",
    "แตกพอร์ต": "พอร์ตแตก... แต่ใจยังไม่แตก (มั้ง) 💔",
    "ลาก่อน btc": "ลาก่อน BTC... ขอกลับไปขายข้าวมันไก่ละ 🍗",
    "ฟลอร์": "ลงแรงกว่านี้ก็ทะลุใต้ถุนบ้านแล้ว 🕳️",
    "บิน": "บินทีไร ตกรถทุกที ✈️",
    "เข้าไม่ทัน": "เข้าไม่ทันก็ยืนมองกราฟอย่างเดียวละกัน 👀",
    "แทงสวน": "แทงสวนทีไร โดนเหยียบจมดินทุกที 🤯",
}

def get_reply(text: str) -> Optional[str]:
    """
    Mapping ข้อความ → คำตอบ (ตาม KEYWORD_MAP)
    ถ้าเจอ key ตรง → return ข้อความตอบ
    ถ้าไม่เจอ → return None
    """
    if not text:
        return None
    normalized = text.strip().lower()
    for key, reply in KEYWORD_MAP.items():
        if normalized == key.lower():
            return reply
    return None

# === ฟังก์ชันเสริม: ตรวจจับคำสั่งขอราคา ===
_PRICE_CMD = re.compile(r'^(?:ราคา|price)\s*([A-Za-z]{3,10})(?:/USDT|USDT)?$', re.IGNORECASE)

def parse_price_command(text: str) -> Optional[str]:
    """
    ตรวจข้อความ ถ้า match pattern 'ราคา XXX' หรือ 'price XXX'
    → return symbol เป็น XXXUSDT
    เช่น:
      'ราคา BTC' → 'BTCUSDT'
      'price eth' → 'ETHUSDT'
      'ราคา BTCUSDT' → 'BTCUSDT'
    ถ้าไม่ match → return None
    """
    if not text:
        return None
    m = _PRICE_CMD.search(text.strip())
    if not m:
        return None
    base = m.group(1).upper()
    return base if base.endswith("USDT") else f"{base}USDT"
# --- MOCK analysis command parser (วางเพิ่มท้ายไฟล์) ---
import re as _re

_ANALYZE_MOCK = _re.compile(r'^(?:mock|วิเคราะห์\s*mock)\s*$', _re.IGNORECASE)

def parse_analysis_mock(text: str) -> bool:
    """
    คืน True ถ้าผู้ใช้พิมพ์ 'mock' หรือ 'วิเคราะห์ mock'
    ใช้สำหรับสั่งให้บอทตอบผลวิเคราะห์จำลอง (ไม่ใช้ราคา API จริง)
    """
    if not text:
        return False
    return _ANALYZE_MOCK.search(text.strip()) is not None


# app/analysis/entry_exit.py
from __future__ import annotations
from typing import Dict, Optional, Tuple, List

import math
import pandas as pd

from .scenarios import analyze_scenarios

__all__ = ["suggest_trade", "format_trade_text"]


def _rr(entry: float, sl: float, tp: float) -> Optional[float]:
    """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Risk:Reward (R:R). ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö ‡∏Ñ‡∏∑‡∏ô None"""
    if entry is None or sl is None or tp is None:
        return None
    risk = abs(entry - sl)
    reward = abs(tp - entry)
    if risk == 0:
        return None
    return reward / risk


def _fmt(x: Optional[float]) -> str:
    if x is None or (isinstance(x, float) and (math.isnan(x) or math.isinf(x))):
        return "-"
    return f"{x:,.2f}"


def suggest_trade(
    df: pd.DataFrame,
    *,
    symbol: str = "BTCUSDT",
    tf: str = "1D",
    cfg: Optional[Dict] = None,
) -> Dict[str, object]:
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏à‡∏∏‡∏î‡πÄ‡∏Ç‡πâ‡∏≤/TP/SL ‡∏à‡∏≤‡∏Å‡∏ú‡∏• scenarios

    ‡∏Ñ‡πà‡∏≤ config ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö:
      - use_pct_targets: bool            # ‡πÉ‡∏ä‡πâ SL/TP ‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏à‡∏≤‡∏Å Entry (‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô False)
      - sl_pct: float                    # % SL ‡πÄ‡∏ä‡πà‡∏ô 0.03 = 3%
      - tp_pcts: List[float]             # % TP ‡πÄ‡∏ä‡πà‡∏ô [0.03, 0.07, 0.12]
      - min_prob: float                  # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡πÄ‡∏ä‡∏¥‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (0-100)
      - min_rr: float                    # ‡∏Å‡∏£‡∏≠‡∏á R:R ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ (‡πÄ‡∏ä‡πà‡∏ô 1.5)
      - sc_cfg: Dict                     # config ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á analyze_scenarios
    """
    cfg = cfg or {}

    sc = analyze_scenarios(df, symbol=symbol, tf=tf, cfg=cfg.get("sc_cfg", None))
    last = df.iloc[-1]
    close = float(last["close"])

    perc: Dict[str, int] = sc.get("percent", {"up": 33, "down": 33, "side": 34})
    # ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Ç‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô/‡∏Ç‡∏≤‡∏•‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
    prob_up = int(perc.get("up", 0))
    prob_down = int(perc.get("down", 0))
    prob_side = int(perc.get("side", 0))

    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î
    direction = max(perc, key=perc.get)  # "up" | "down" | "side"

    # ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ (‡∏ñ‡πâ‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤)
    note: Optional[str] = None
    min_prob = float(cfg.get("min_prob", 0))  # 0..100
    if perc.get(direction, 0) < min_prob:
        note = f"Confidence below threshold: {perc.get(direction, 0)}% < {min_prob}%"

    levels = sc.get("levels", {})
    recent_high = levels.get("recent_high")
    recent_low = levels.get("recent_low")
    fibo = levels.get("fibo", {}) or {}
    ext_1272 = fibo.get("ext_1.272")
    ext_1618 = fibo.get("ext_1.618")

    # ‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå
    use_pct_targets = bool(cfg.get("use_pct_targets", False))
    sl_pct = float(cfg.get("sl_pct", 0.03))          # 3% ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    tp_pcts: List[float] = list(cfg.get("tp_pcts", [0.03, 0.07, 0.12]))  # 3%,7%,12% ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô

    entry: Optional[float] = None
    sl: Optional[float] = None
    take_profits: Dict[str, float] = {}

    # ====== ‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏´‡∏•‡∏±‡∏Å ======
    if direction == "side":
        entry = None
        sl = None
        note = (note + " | " if note else "") + "Market is SIDE (no entry suggested)."
    else:
        entry = close
        if use_pct_targets:
            # ‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≥‡∏´‡∏ô‡∏î SL/TP ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏à‡∏≤‡∏Å Entry ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            if direction == "up":
                sl = entry * (1 - sl_pct)
                # TP ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
                tps = [entry * (1 + p) for p in tp_pcts]
            else:  # "down"
                sl = entry * (1 + sl_pct)
                # TP ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
                tps = [entry * (1 - p) for p in tp_pcts]
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠ TP1/TP2/TP3
            take_profits = {f"TP{i+1}": float(tp) for i, tp in enumerate(tps)}
        else:
            # ‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏î‡∏¥‡∏°: ‡πÉ‡∏ä‡πâ recent high/low ‡πÅ‡∏•‡∏∞ Fibonacci extensions
            if direction == "up":
                sl = float(recent_low) if recent_low is not None else None
                candidates: Tuple[Tuple[str, Optional[float]], ...] = (
                    ("TP1", ext_1272),
                    ("TP2", ext_1618),
                )
                take_profits = {k: float(v) for k, v in candidates if v is not None and v > entry}
                if not take_profits and recent_high is not None and recent_high > entry:
                    take_profits = {"TP1": float(recent_high)}
            else:  # "down"
                sl = float(recent_high) if recent_high is not None else None
                candidates = (
                    ("TP1", ext_1272),
                    ("TP2", ext_1618),
                )
                take_profits = {k: float(v) for k, v in candidates if v is not None and v < entry}
                if not take_profits and recent_low is not None and recent_low < entry:
                    take_profits = {"TP1": float(recent_low)}

    # ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏° R:R ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ (‡∏ñ‡πâ‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤)
    min_rr = float(cfg.get("min_rr", 0.0))
    if entry is not None and sl is not None and min_rr > 0 and take_profits:
        filtered: Dict[str, float] = {}
        for name, tp in take_profits.items():
            ratio = _rr(entry, sl, tp)
            if ratio is not None and ratio >= min_rr:
                filtered[name] = tp
        if filtered:
            take_profits = filtered
        else:
            note = (note + " | " if note else "") + f"No TP meets R:R ‚â• {min_rr}"

    return {
        "symbol": symbol,
        "tf": tf,
        "direction": direction,                 # "up" | "down" | "side"
        "percent": perc,                        # {"up": int, "down": int, "side": int}
        "prob_up": prob_up,
        "prob_down": prob_down,
        "entry": entry,                         # float | None
        "stop_loss": sl,                        # float | None
        "take_profits": take_profits,           # {"TP1": float, "TP2": float, "TP3": float}
        "note": note,                           # str | None
        "scenarios": sc,                        # ‡πÅ‡∏ô‡∏ö‡∏ú‡∏•‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠
        "config_used": {
            "use_pct_targets": use_pct_targets,
            "sl_pct": sl_pct,
            "tp_pcts": tp_pcts,
            "min_prob": min_prob,
            "min_rr": min_rr,
        },
    }


def format_trade_text(s: Dict[str, object]) -> str:
    """
    ‡πÅ‡∏õ‡∏•‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å suggest_trade() ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô LINE
    ‡∏£‡∏ß‡∏° % ‡∏Ç‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô/‡∏Ç‡∏≤‡∏•‡∏á ‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
    """
    sym = s.get("symbol", "")
    tf = s.get("tf", "")
    direction = str(s.get("direction", "")).upper()
    perc = s.get("percent", {}) or {}
    up_p = perc.get("up", 0)
    down_p = perc.get("down", 0)
    side_p = perc.get("side", 0)

    entry = _fmt(s.get("entry"))
    sl = _fmt(s.get("stop_loss"))

    tps = s.get("take_profits", {}) or {}
    # ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏á TP ‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠ TP1, TP2, TP3
    tp_items = []
    for key in ["TP1", "TP2", "TP3"]:
        if key in tps:
            tp_items.append(_fmt(tps[key]))
    if not tp_items:
        tp_items = [_fmt(v) for _, v in sorted(tps.items())]
    tp_list = " / ".join(tp_items) if tp_items else "-"

    lines = [
        f"üìä {sym} {tf} ‚Äî ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì",
        f"UP {up_p}% | DOWN {down_p}% | SIDE {side_p}%",
        "",
        f"üéØ ‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (bias): {direction}",
        f"‚Ä¢ Entry: {entry}",
        f"‚Ä¢ SL: {sl}",
        f"‚Ä¢ TP: {tp_list}",
    ]
    note = s.get("note")
    if note:
        lines += ["", f"‚ÑπÔ∏è {note}"]
    return "\n".join(lines)

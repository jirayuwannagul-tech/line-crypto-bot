# jobs/push_btc_hourly.py
import asyncio
from datetime import datetime

from app.analysis.timeframes import get_data
from app.analysis.scenarios import analyze_scenarios
from app.adapters.delivery_line import push_text  # ‚úÖ ‡πÉ‡∏ä‡πâ delivery_line ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà client

LINE_TARGET = "YOUR_LINE_USER_ID"  # üëâ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ User ID ‡∏´‡∏£‡∏∑‡∏≠ Group ID


async def push_btc():
    try:
        # 1) ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 1H
        df = get_data("BTCUSDT", "1H")
        if df is None or df.empty:
            raise RuntimeError("No data loaded for BTCUSDT 1H")

        # 2) ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        result = analyze_scenarios(df, symbol="BTCUSDT", tf="1H")

        # 3) ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        msg = f"""
üìä BTCUSDT (1H)
‚è∞ {datetime.utcnow().strftime("%Y-%m-%d %H:%M")} UTC
Up={result['percent']['up']}% | Down={result['percent']['down']}% | Side={result['percent']['side']}%
EMA50={result['levels']['ema50']:.2f} | EMA200={result['levels']['ema200']:.2f}
High={result['levels']['recent_high']:.2f} | Low={result['levels']['recent_low']:.2f}
        """.strip()

        # 4) ‡∏™‡πà‡∏á‡πÑ‡∏õ LINE
        await push_text(LINE_TARGET, msg)
        print("[OK] pushed BTC report to LINE")

    except Exception as e:
        print("[ERROR]", e)


if __name__ == "__main__":
    asyncio.run(push_btc())

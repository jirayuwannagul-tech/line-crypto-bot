# jobs/daily_btc_analysis.py
"""
Daily BTC Analysis Job
‡∏î‡∏∂‡∏á BTCUSDT 1D (‡∏à‡∏≤‡∏Å provider) ‚Üí ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï app/data/historical.xlsx ‚Üí ‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤ engine ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏≠‡∏Å ‚Üí ‡∏™‡πà‡∏á LINE ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô

‡∏ß‡∏¥‡∏ò‡∏µ‡∏£‡∏±‡∏ô:
    python -m jobs.daily_btc_analysis
‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô Procfile:
    daily-btc: python -m jobs.daily_btc_analysis
"""

from __future__ import annotations
import os
import sys
from datetime import datetime, timezone
import traceback

import pandas as pd

# === ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡πÇ‡∏°‡∏î‡∏π‡∏• ===
from app.analysis.timeframes import get_data
from app.services.wave_service import analyze_wave, build_brief_message
from app.analysis.entry_exit import suggest_trade, format_trade_text
from app.adapters import delivery_line as line

HIST_PATH = "app/data/historical.xlsx"
SYMBOL = "BTCUSDT"
TF = "1D"
PROFILE = os.getenv("STRATEGY_PROFILE", "baseline")

# LINE targets (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á ‡∏à‡∏∞‡πÉ‡∏ä‡πâ broadcast)
LINE_TO = os.getenv("LINE_DEFAULT_TO", "").strip()


def _now_utc():
    return datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S UTC")


def save_df_to_excel(df: pd.DataFrame, path: str, sheet: str):
    """
    ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏ó‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏ä‡∏µ‡∏ó (‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏™‡∏∏‡∏î ‡∏•‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤ schema mismatch)
    - index ‡πÄ‡∏õ‡πá‡∏ô datetime/str ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏π‡πà
    - ‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤ df ‡πÄ‡∏õ‡πá‡∏ô OHLCV + ‡∏≠‡∏¥‡∏ô‡∏î‡∏¥‡πÄ‡∏Ñ‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ (‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ)
    """
    mode = "a" if os.path.exists(path) else "w"
    if mode == "a":
        # ‡∏•‡∏ö‡∏ä‡∏µ‡∏ó‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏û‡∏µ‡πâ‡∏¢‡∏ô
        with pd.ExcelWriter(path, engine="openpyxl", mode="a", if_sheet_exists="replace") as writer:
            df.to_excel(writer, sheet_name=sheet, index=True)
    else:
        with pd.ExcelWriter(path, engine="openpyxl", mode="w") as writer:
            df.to_excel(writer, sheet_name=sheet, index=True)


def send_line(text: str):
    """
    ‡∏™‡πà‡∏á LINE ‡πÅ‡∏ö‡∏ö‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô:
    - ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ LINE_DEFAULT_TO ‚Üí push ‡πÑ‡∏õ‡∏¢‡∏±‡∏á id ‡∏ô‡∏±‡πâ‡∏ô
    - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡πá broadcast
    """
    try:
        if LINE_TO:
            line.push_message(LINE_TO, text)   # ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏ô‡∏µ‡πâ‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö (to, text)
        else:
            line.broadcast(text)
    except TypeError:
        # ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏ö‡∏≤‡∏á‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏Ç‡∏≠‡∏á delivery_line ‡πÉ‡∏ä‡πâ signature ‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≤‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ
        try:
            line.push_message(text)
        except Exception:
            line.broadcast(text)


def main():
    print(f"[{_now_utc()}] Start daily BTC analysis job")

    # 1) ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏î (‡πÑ‡∏°‡πà‡∏™‡πà‡∏á xlsx_path) ‚Üí 1D ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏ï‡πá‡∏°‡∏ä‡πà‡∏ß‡∏á
    print("‚Ä¢ Fetching fresh OHLCV from provider (1D)‚Ä¶")
    df_1d = get_data(SYMBOL, TF)   # ‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏Ñ‡∏∏‡∏ì‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö ‚Äú‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏î‡∏à‡∏≤‡∏Å provider (‡πÑ‡∏°‡πà‡∏™‡πà‡∏á xlsx_path)‚Äù
    if df_1d is None or len(df_1d) == 0:
        raise RuntimeError("get_data() returned empty df")

    # 2) ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï historical.xlsx (‡∏ä‡∏µ‡∏ó: BTCUSDT_1D) ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏™‡∏°‡∏≠
    sheet_name = f"{SYMBOL}_{TF}"
    print(f"‚Ä¢ Writing latest data to {HIST_PATH} (sheet: {sheet_name}) ‚Ä¶ rows={len(df_1d)}")
    save_df_to_excel(df_1d, HIST_PATH, sheet_name)

    # 3) ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ engine / services ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
    #    - ‡πÉ‡∏ä‡πâ xlsx_path ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ pipeline ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
    print("‚Ä¢ Analyzing wave/summary from historical.xlsx ‚Ä¶")
    payload = analyze_wave(SYMBOL, TF, xlsx_path=HIST_PATH)
    brief = build_brief_message(payload)

    # 4) ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÄ‡∏Ç‡πâ‡∏≤/‡∏≠‡∏≠‡∏Å‡∏ï‡∏≤‡∏°‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå (‡πÉ‡∏ä‡πâ df ‡∏à‡∏≤‡∏Å payload ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡πÑ‡∏°‡πà‡∏á‡∏±‡πâ‡∏ô‡πÉ‡∏´‡πâ suggest_trade ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏á)
    print("‚Ä¢ Building trade suggestion ‚Ä¶")
    df_for_trade = payload.get("debug", {}).get("df")
    suggestion = suggest_trade(
        df_for_trade,
        symbol=SYMBOL,
        tf=TF,
        cfg={"profile": PROFILE, "xlsx_path": HIST_PATH},
    )
    trade_text = format_trade_text(suggestion)

    # 5) ‡πÄ‡∏Å‡∏ì‡∏ë‡πå ‚Äú‡∏°‡∏µ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‚Äù ‚Üí ‡∏™‡πà‡∏á LINE
    has_entry = False
    try:
        # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á dict ‡πÅ‡∏•‡∏∞ object-like
        entry = (suggestion or {}).get("entry") if isinstance(suggestion, dict) else getattr(suggestion, "entry", None)
        has_entry = bool(entry)
    except Exception:
        has_entry = False

    # ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏∞ LINE
    header = f"üóì {datetime.now().strftime('%Y-%m-%d %H:%M')} (Asia/Bangkok)\n"
    body = (
        f"üìà Daily BTC Analysis (from provider ‚Üí saved to Excel)\n"
        f"{brief}\n\n"
        f"{trade_text}"
    )
    msg = header + body

    # ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ ‚Äú‡∏°‡∏µ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÉ‡∏´‡∏°‡πà‚Äù ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    if has_entry:
        print("‚Ä¢ Signal detected ‚Üí sending LINE ‚Ä¶")
        send_line(msg)
    else:
        print("‚Ä¢ No tradable signal ‚Üí skip LINE. (You still can check logs)")

    print(f"[{_now_utc()}] Job done.")


if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        err = f"‚ùå Daily BTC job failed: {e}\n{traceback.format_exc()}"
        print(err, file=sys.stderr)
        # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ú‡πà‡∏≤‡∏ô LINE (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)
        try:
            send_line(err[:1800])  # ‡∏Å‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô
        except Exception:
            pass
        sys.exit(1)

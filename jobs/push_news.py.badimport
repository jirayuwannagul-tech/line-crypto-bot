from __future__ import annotations

import argparse
import logging
import sys
from app.utils.logging_tools import setup_logging if False else None  # ถ้ามีฟังก์ชันตั้งค่า log อยู่แล้ว ให้แก้ตามโปรเจกต์
from app.services.news_service import build_news_message
from app.services.notifier_line import get_notifier

logger = logging.getLogger(__name__)

def main():
    # setup logging แบบง่าย ถ้าโปรเจกต์มี setup_logging ให้เรียกแทนได้
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s %(levelname)s %(name)s: %(message)s"
    )

    parser = argparse.ArgumentParser(description="Push latest crypto/finance news to LINE")
    parser.add_argument("--max-items", type=int, default=6, help="จำนวนหัวข้อข่าวสูงสุดที่ส่ง")
    parser.add_argument("--limit-per-source", type=int, default=3, help="ดึงต่อแหล่งข่าวกี่ชิ้น")
    parser.add_argument("--dry-run", action="store_true", help="พิมพ์ข้อความอย่างเดียว ไม่ส่ง LINE")
    args = parser.parse_args()

    # สร้างข้อความข่าว
    msg = build_news_message(max_items=args.max_items, limit_per_source=args.limit_per_source)
    logger.info("[push_news] built message length=%d", len(msg))

    if args.dry_run:
        print(msg)
        logger.info("[push_news] dry-run only, not sending")
        return 0

    # ส่ง LINE (REAL ถ้ามี TOKEN, ไม่งั้น DUMMY)
    notifier = get_notifier()
    logger.info("[push_news] notifier=%s", notifier.info())
    ok, detail = notifier.broadcast(msg)
    if ok:
        logger.info("[push_news] sent OK: %s", detail)
        return 0
    else:
        logger.error("[push_news] send FAILED: %s", detail)
        return 1

if __name__ == "__main__":
    sys.exit(main())

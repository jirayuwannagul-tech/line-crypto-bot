"""
watch_targets.py
================

Job ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤ ‚Üí ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÅ‡∏ï‡∏∞ TP/SL ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
- ‡∏î‡∏∂‡∏á trade plans ‡∏à‡∏≤‡∏Å trade_plan_store
- ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å price_provider_binance
- ‡∏ñ‡πâ‡∏≤‡πÅ‡∏ï‡∏∞‡πÄ‡∏õ‡πâ‡∏≤ ‚Üí ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (mark_target_hit/mark_closed)
- ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô notifier_line
"""

import time
import traceback
from typing import Dict, Any

# =============================================================================
# CONFIG LAYER
# =============================================================================
CHECK_INTERVAL = 15  # ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ, ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏£‡∏≤‡∏Ñ‡∏≤

# =============================================================================
# DATA LAYER
# =============================================================================
from app.services import trade_plan_store
from app.services import notifier_line
from app.services import price_provider_binance


def get_current_price(symbol: str) -> float:
    """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á symbol"""
    return price_provider_binance.get_price(symbol)


# =============================================================================
# SERVICE LAYER
# =============================================================================
def check_plan(plan: Dict[str, Any]) -> None:
    """
    ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ú‡∏ô‡πÄ‡∏ó‡∏£‡∏î‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏ï‡∏∞ TP/SL ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    """
    symbol = plan["symbol"]
    ts = plan["timestamp"]

    try:
        price = get_current_price(symbol)
    except Exception as e:
        print(f"‚ö†Ô∏è error fetching price {symbol}: {e}")
        return

    # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
    entry = float(plan.get("entry") or 0)
    tp1 = float(plan.get("tp1") or 0)
    tp2 = float(plan.get("tp2") or 0)
    tp3 = float(plan.get("tp3") or 0)
    sl = float(plan.get("sl") or 0)
    direction = plan.get("direction", "").upper()

    hit_messages = []

    if direction == "SHORT":
        if not plan.get("tp1_hit") and price <= tp1:
            trade_plan_store.mark_target_hit(ts, "tp1")
            hit_messages.append(f"‚úÖ TP1 {tp1} hit @ {price}")
        if not plan.get("tp2_hit") and price <= tp2:
            trade_plan_store.mark_target_hit(ts, "tp2")
            hit_messages.append(f"‚úÖ TP2 {tp2} hit @ {price}")
        if not plan.get("tp3_hit") and price <= tp3:
            trade_plan_store.mark_target_hit(ts, "tp3")
            trade_plan_store.mark_closed(ts, "TP3 reached")
            hit_messages.append(f"üèÜ TP3 {tp3} hit @ {price} ‚Üí Plan Closed")
        if not plan.get("sl_hit") and price >= sl:
            trade_plan_store.mark_target_hit(ts, "sl")
            trade_plan_store.mark_closed(ts, "Stop Loss")
            hit_messages.append(f"‚ùå SL {sl} hit @ {price} ‚Üí Plan Closed")

    elif direction == "LONG":
        if not plan.get("tp1_hit") and price >= tp1:
            trade_plan_store.mark_target_hit(ts, "tp1")
            hit_messages.append(f"‚úÖ TP1 {tp1} hit @ {price}")
        if not plan.get("tp2_hit") and price >= tp2:
            trade_plan_store.mark_target_hit(ts, "tp2")
            hit_messages.append(f"‚úÖ TP2 {tp2} hit @ {price}")
        if not plan.get("tp3_hit") and price >= tp3:
            trade_plan_store.mark_target_hit(ts, "tp3")
            trade_plan_store.mark_closed(ts, "TP3 reached")
            hit_messages.append(f"üèÜ TP3 {tp3} hit @ {price} ‚Üí Plan Closed")
        if not plan.get("sl_hit") and price <= sl:
            trade_plan_store.mark_target_hit(ts, "sl")
            trade_plan_store.mark_closed(ts, "Stop Loss")
            hit_messages.append(f"‚ùå SL {sl} hit @ {price} ‚Üí Plan Closed")

    # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å‡πÄ‡∏õ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏ô
    for msg in hit_messages:
        notifier_line.send_message(f"[{symbol}] {msg}")


def check_all_plans() -> None:
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ú‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà"""
    plans = trade_plan_store.list_trade_plans(open_only=True)
    if not plans:
        print("‚ÑπÔ∏è no open trade plans")
        return

    for plan in plans:
        try:
            check_plan(plan)
        except Exception:
            traceback.print_exc()


# =============================================================================
# RUNNER LAYER
# =============================================================================
def run_loop() -> None:
    """‡∏ß‡∏ô loop ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡πÜ CHECK_INTERVAL ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ"""
    print("üöÄ starting watch_targets loop...")
    while True:
        check_all_plans()
        time.sleep(CHECK_INTERVAL)


if __name__ == "__main__":
    run_loop()

# --- scripts/push_line_report.py (PATCH) ---
import os, requests
from analyze_chart import generate_report
from dotenv import load_dotenv
load_dotenv()  # ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå .env ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô environment variables

LINE_PUSH_URL = "https://api.line.me/v2/bot/message/push"
LINE_PROFILE_URL = "https://api.line.me/v2/bot/profile/{userId}"

TOKEN = os.environ.get("LINE_CHANNEL_ACCESS_TOKEN")
# ‡πÉ‡∏ä‡πâ LINE_TO ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ; ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡πá fallback ‡πÄ‡∏õ‡πá‡∏ô LINE_USER_ID
TO = os.environ.get("LINE_TO") or os.environ.get("LINE_USER_ID")

def chunk_text(text, limit=1800):
    chunks, buf, length = [], [], 0
    for line in text.splitlines():
        if length + len(line) + 1 > limit:
            chunks.append("\n".join(buf)); buf=[line]; length=len(line) + 1
        else:
            buf.append(line); length += len(line) + 1
    if buf: chunks.append("\n".join(buf))
    return chunks

def _headers():
    return {"Authorization": f"Bearer {TOKEN}", "Content-Type": "application/json"}

def check_env():
    if not TOKEN or not TO:
        print("‚ùå Missing env: LINE_CHANNEL_ACCESS_TOKEN or LINE_TO/LINE_USER_ID")
        print("  export LINE_CHANNEL_ACCESS_TOKEN=... ; export LINE_TO=...  (‡∏´‡∏£‡∏∑‡∏≠ LINE_USER_ID=...)")
        raise SystemExit(1)
    else:
        print(f"‚û°Ô∏è Using recipient: {TO[:6]}‚Ä¶ (masked)")

def check_profile():
    # ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ userId; ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô groupId/roomId ‡∏à‡∏∞‡πÑ‡∏î‡πâ 400/404 (‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡∏™‡πà‡∏á‡πÑ‡∏î‡πâ)
    url = LINE_PROFILE_URL.format(userId=TO)
    r = requests.get(url, headers=_headers(), timeout=20)
    if r.status_code == 200:
        print(f"‚úÖ Profile OK for {TO}: {r.json().get('displayName','(no name)')}")
        return True
    elif r.status_code in (404, 400):
        print("‚ÑπÔ∏è Profile check not OK (404/400) ‚Äî ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ groupId/roomId ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏à‡∏∞‡∏•‡∏≠‡∏á‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏¢")
    elif r.status_code in (401, 403):
        print(f"‚ùå Auth error {r.status_code}. ‡∏ï‡∏£‡∏ß‡∏à Channel Access Token (scope/mismatch).")
    else:
        print(f"‚ùå Profile check error {r.status_code}: {r.text}")
    return False

def push_text(text):
    for chunk in chunk_text(text):
        payload = {"to": TO, "messages": [{"type": "text", "text": chunk}]}
        r = requests.post(LINE_PUSH_URL, headers=_headers(), json=payload, timeout=20)
        if r.status_code >= 300:
            print(f"‚ùå Push error {r.status_code}: {r.text}")
            if r.status_code == 401:
                print("   ‚Üí Token ‡∏ú‡∏¥‡∏î/‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏/Channel ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á")
            if r.status_code == 403:
                print("   ‚Üí ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå push ‡∏ñ‡∏∂‡∏á‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ô‡∏µ‡πâ (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô/‡πÇ‡∏î‡∏ô‡∏ö‡∏•‡πá‡∏≠‡∏Å)")
            if r.status_code == 400:
                print("   ‚Üí payload/TO ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô (‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÅ‡∏ö‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß)")
            raise SystemExit(1)

def main():
    check_env()
    ok = check_profile()
    if not ok:
        print("‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏° profile check ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡∏™‡πà‡∏á‡πÄ‡∏•‡∏¢ (‡∏Å‡∏£‡∏ì‡∏µ groupId/roomId).")
    title = "üìä BTCUSDT Report (1D/4H/1H)"
    body = generate_report()
    print("‚Üí Sending title‚Ä¶");  push_text(title)
    print("‚Üí Sending report‚Ä¶"); push_text(body)
    print("‚úÖ Pushed report to LINE")

if __name__ == "__main__":
    main()

import os
import math
import yfinance as yf
import pandas as pd

OUT_PATH = "app/data/historical.xlsx"
SYMBOL = "BTC-USD"  # ‡∏à‡∏≤‡∏Å Yahoo
SHEETS = {
    "BTCUSDT_1D": {"interval": "1d", "start": "2010-01-01"},
    "BTCUSDT_4H": {"interval": "4h", "start": "2017-01-01"},  # intraday ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ä‡πà‡∏ß‡∏á; ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏µ 2017 ‡∏û‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    "BTCUSDT_1H": {"interval": "1h", "start": "2017-01-01"},
}

os.makedirs(os.path.dirname(OUT_PATH), exist_ok=True)
writer = pd.ExcelWriter(OUT_PATH, engine="openpyxl")

def _normalize(df: pd.DataFrame) -> pd.DataFrame:
    # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Date/Datetime ‡∏à‡∏≤‡∏Å yfinance
    df = df.rename(columns={
        "Open": "open", "High": "high", "Low": "low",
        "Close": "close", "Adj Close": "adj_close", "Volume": "volume",
        "Date": "timestamp", "Datetime": "timestamp",
    })
    if "timestamp" not in df.columns:
        df = df.reset_index().rename(columns={"index": "timestamp"})
    # ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô UTC, ‡∏•‡∏ö‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á, ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
    ts = pd.to_datetime(df["timestamp"], utc=True, errors="coerce")
    df = df.assign(timestamp=ts)
    df = df.dropna(subset=["timestamp", "open", "high", "low", "close", "volume"])
    # sanity
    df = df[(df["low"] <= df["open"]) & (df["low"] <= df["close"]) &
            (df["high"] >= df["open"]) & (df["high"] >= df["close"]) &
            (df["volume"] >= 0)]
    df = df.sort_values("timestamp").drop_duplicates(subset=["timestamp"])
    return df.loc[:, ["timestamp", "open", "high", "low", "close", "volume"]]

def _download(symbol: str, start: str, interval: str) -> pd.DataFrame:
    # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö intraday Yahoo ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ ‚Üí ‡πÉ‡∏ä‡πâ period="max" ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏°‡∏≠
    # yfinance ‡∏à‡∏∞ handle ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏¢‡∏≤‡∏ß‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏á; ‡∏ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏à‡∏∞‡∏•‡∏≠‡∏á‡πÅ‡∏ö‡πà‡∏á‡∏ä‡πà‡∏ß‡∏á‡∏õ‡∏µ‡∏•‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    try:
        df = yf.download(symbol, start=start, interval=interval, progress=False)
        if not df.empty:
            return df
    except Exception:
        pass
    # ‡πÅ‡∏ú‡∏ô‡∏™‡∏≥‡∏£‡∏≠‡∏á: ‡∏î‡∏∂‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏µ‡πÜ
    years = list(range(int(start[:4]), pd.Timestamp.utcnow().year + 1))
    parts = []
    for y in years:
        s = f"{y}-01-01"
        e = f"{y}-12-31"
        try:
            part = yf.download(symbol, start=s, end=e, interval=interval, progress=False)
            if not part.empty:
                parts.append(part)
        except Exception:
            continue
    return pd.concat(parts).sort_index() if parts else pd.DataFrame()

for sheet, opt in SHEETS.items():
    print(f"Fetching {sheet} ({opt['interval']}) ...")
    raw = _download(SYMBOL, opt["start"], opt["interval"])
    if raw.empty:
        print(f"‚ö†Ô∏è  {sheet}: no data downloaded; skipping sheet.")
        continue
    df = _normalize(raw)
    df.to_excel(writer, sheet_name=sheet, index=False)
    print(f"‚úÖ  {sheet}: rows={len(df)}")

writer.close()
print(f"üéâ Saved -> {OUT_PATH}")

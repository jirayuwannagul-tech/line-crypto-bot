# scripts/send_line_message.py
from __future__ import annotations
import os, sys
from dotenv import load_dotenv
from linebot.v3.messaging import (
    Configuration, ApiClient, MessagingApi,
    PushMessageRequest, TextMessage as LineTextMessage
)

def env_or_fail(key: str) -> str:
    val = os.getenv(key)
    if not val:
        print(f"‚ùå ENV {key} ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ (‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô .env ‡∏´‡∏£‡∏∑‡∏≠ export ‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏±‡∏ô)", file=sys.stderr)
        sys.exit(1)
    return val

def send_message(text: str):
    load_dotenv()  # ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å .env
    token = env_or_fail("LINE_CHANNEL_ACCESS_TOKEN")
    user_id = env_or_fail("LINE_USER_ID")

    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏ó‡πÄ‡∏Ñ‡∏ô‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡πá‡∏ß
    if token.startswith("<") or " " in token:
        print("‚ùå ‡πÇ‡∏ó‡πÄ‡∏Ñ‡∏ô‡∏ú‡∏¥‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö (‡∏≠‡∏¢‡πà‡∏≤‡πÉ‡∏™‡πà < > ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á)", file=sys.stderr)
        sys.exit(1)

    config = Configuration(access_token=token)
    with ApiClient(config) as api_client:
        api = MessagingApi(api_client)
        api.push_message(
            PushMessageRequest(
                to=user_id,
                messages=[LineTextMessage(text=text)]
            )
        )
    print("‚úÖ Sent:", text)

if __name__ == "__main__":
    msg = "üîî Test message from VS Code terminal!"
    if len(sys.argv) > 1:
        msg = " ".join(sys.argv[1:])
    send_message(msg)

#!/usr/bin/env python3
"""
Mock price alert (single-file)
- ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ß‡∏¥‡πà‡∏á‡πÑ‡∏õ‡∏´‡∏≤ entry ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
- ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ LINE token + ‡∏£‡∏∞‡∏ö‡∏∏ --to ‡∏à‡∏∞ Push LINE ‡∏à‡∏£‡∏¥‡∏á
- ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡∏à‡∏∞‡∏û‡∏¥‡∏°‡∏û‡πå‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏ã‡∏•‡πÅ‡∏ó‡∏ô

‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
  python scripts/mock_price_alert.py --symbol BTCUSDT --entry 60000 --tol 50 --to <USER_ID>
‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏û‡∏¥‡∏°‡∏û‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß:
  python scripts/mock_price_alert.py --symbol BTCUSDT --entry 60000 --tol 50
"""

from __future__ import annotations
import os, time, argparse, math
from typing import Optional, List

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ LINE Push (optional) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def try_push_line(user_id: Optional[str], text: str) -> bool:
    """
    ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ token + user_id ‡∏à‡∏∞ push ‡∏à‡∏£‡∏¥‡∏á; ‡πÑ‡∏°‡πà‡∏á‡∏±‡πâ‡∏ô‡∏Ñ‡∏∑‡∏ô False
    """
    token = os.getenv("LINE_CHANNEL_ACCESS_TOKEN", "")
    if not token or not user_id:
        return False
    try:
        from linebot.v3.messaging import Configuration, ApiClient, MessagingApi, PushMessageRequest, TextMessage
        cfg = Configuration(access_token=token)
        with ApiClient(cfg) as c:
            MessagingApi(c).push_message(
                PushMessageRequest(to=user_id, messages=[TextMessage(text=text)])
            )
        print("[PUSH] sent to LINE.")
        return True
    except Exception as e:
        print(f"[PUSH] failed: {e}")
        return False

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Mock price stream ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def mock_prices_toward(target: float, start: Optional[float] = None, steps: int = 10) -> List[float]:
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏•‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ target ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ ‡πÜ
    """
    if start is None:
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏ start ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏´‡πà‡∏≤‡∏á‡∏™‡∏±‡∏Å 1.5% ‡∏•‡∏á/‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
        start = target * (0.985 if target > 0 else 1.0)
    step = (target - start) / max(steps, 1)
    return [start + i * step for i in range(steps)] + [target, target + step]

def fmt(x: Optional[float]) -> str:
    if x is None: return "-"
    x = float(x)
    if abs(x) >= 1000: return f"{x:,.2f}"
    if abs(x) >= 1:    return f"{x:.4f}"
    return f"{x:.6f}"

def main():
    ap = argparse.ArgumentParser(description="Mock price alert tester")
    ap.add_argument("--symbol", default="BTCUSDT")
    ap.add_argument("--entry", type=float, required=True, help="‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£")
    ap.add_argument("--tol", type=float, default=0.0, help="‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô ¬±tol (‡πÄ‡∏ä‡πà‡∏ô 50)")
    ap.add_argument("--start", type=float, default=None, help="‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏•‡∏≠‡∏á (‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà‡∏à‡∏∞ auto)")
    ap.add_argument("--steps", type=int, default=10, help="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡πÄ‡∏ï‡πá‡∏õ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏ï‡∏∞")
    ap.add_argument("--interval", type=float, default=1.0, help="‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡πà‡∏≠‡∏™‡πÄ‡∏ï‡πá‡∏õ (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)")
    ap.add_argument("--to", default=None, help="LINE userId ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö push (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà‡∏à‡∏∞‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏ã‡∏•)")
    args = ap.parse_args()

    symbol = args.symbol.upper().replace(":", "").replace("/", "")
    entry  = float(args.entry)
    tol    = float(args.tol)
    prices = mock_prices_toward(entry, start=args.start, steps=args.steps)

    print(f"üëü ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏•‡∏≠‡∏á {symbol} ‡πÑ‡∏õ‡∏ó‡∏µ‡πà {fmt(entry)} tol=¬±{fmt(tol)} (steps={len(prices)}, interval={args.interval}s)")
    hit_once = False

    for px in prices:
        print(f"[TICK] {symbol} = {fmt(px)}")
        # ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç hit: ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ tol ‚Üí ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á |px-entry|<=tol, ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡πá‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô‡πÄ‡∏õ‡πä‡∏∞
        hit = (abs(px - entry) <= tol) if tol > 0 else (px == entry)
        if hit and not hit_once:
            msg = (
                f"üîî ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏ï‡∏∞ {symbol}\n"
                f"‚Ä¢ Price: {fmt(px)}\n"
                f"‚Ä¢ Entry: {fmt(entry)}\n"
                + (f"‚Ä¢ Tol: ¬±{fmt(tol)}\n" if tol > 0 else "")
            )
            pushed = try_push_line(args.to, msg)
            if not pushed:
                print(msg)
            hit_once = True
        time.sleep(max(args.interval, 0.05))

    if not hit_once:
        print("‚ÑπÔ∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÅ‡∏ï‡∏∞ entry (‡∏•‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° steps, tol ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏±‡∏ö start)")

if __name__ == "__main__":
    main()

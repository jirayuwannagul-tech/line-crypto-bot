#!/usr/bin/env python3
"""
Trade Signal Generator ‚Üí LINE Push
‡∏£‡∏ß‡∏°‡∏ú‡∏• Elliott + ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏£‡∏¥‡∏á + Probabilities ‡∏à‡∏≤‡∏Å scenarios.py
‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤ LINE (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î SEND_TO_LINE=1)
"""

from __future__ import annotations

import os
import sys
import argparse
import requests
from typing import Dict, Optional, Tuple

import pandas as pd

# === ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤ ===
from app.logic.scenarios import analyze_scenarios
from app.analysis.timeframes import get_data

# ===============================
# Config: TP/SL (fallback ‡πÄ‡∏ú‡∏∑‡πà‡∏≠ profile ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î)
# ===============================
TP_PCTS = [0.03, 0.05, 0.07]
SL_PCT = 0.03


# ===============================
# Utils: ATR% ‡πÅ‡∏•‡∏∞ Watch Levels
# ===============================
def _atr_pct(df: pd.DataFrame, n: int = 14) -> Optional[float]:
    """
    ATR% = ATR(n) / close ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    """
    if len(df) < n + 1:
        return None
    highs = df["high"].to_numpy()
    lows = df["low"].to_numpy()
    closes = df["close"].to_numpy()

    trs = []
    for i in range(1, len(df)):
        tr = max(highs[i] - lows[i], abs(highs[i] - closes[i - 1]), abs(lows[i] - closes[i - 1]))
        trs.append(tr)
    atr = pd.Series(trs).rolling(n).mean().iloc[-1]
    last_close = df["close"].iloc[-1]
    return float(atr / last_close) if last_close else None


def _watch_levels_from_atr(close: float, atr_pct: Optional[float], k: float = 1.5) -> Tuple[Optional[float], Optional[float]]:
    """
    ‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡πÄ‡∏ù‡πâ‡∏≤‡∏î‡∏π‡πÅ‡∏ö‡∏ö‡∏´‡∏¢‡∏≤‡∏ö ‡πÜ ‡∏à‡∏≤‡∏Å ATR% (¬±k*ATR%)
    """
    if atr_pct is None or close is None:
        return None, None
    return close * (1 - k * atr_pct), close * (1 + k * atr_pct)


# ===============================
# LINE Delivery (push message)
# ===============================
def _can_send_line() -> bool:
    return os.getenv("SEND_TO_LINE", "").strip() == "1"


def _line_token() -> str:
    tok = os.getenv("LINE_CHANNEL_ACCESS_TOKEN", "").strip()
    if not tok:
        raise RuntimeError("ENV LINE_CHANNEL_ACCESS_TOKEN ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")
    return tok


def _line_to_user() -> str:
    to = os.getenv("LINE_USER_ID", "").strip()
    if not to:
        raise RuntimeError("ENV LINE_USER_ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")
    return to


def _push_line_text(text: str, to_user: Optional[str] = None) -> None:
    """
    ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ LINE ‡∏î‡πâ‡∏ß‡∏¢ push API
    """
    url = "https://api.line.me/v2/bot/message/push"
    headers = {
        "Authorization": f"Bearer {_line_token()}",
        "Content-Type": "application/json",
    }
    body = {
        "to": to_user or _line_to_user(),
        "messages": [{"type": "text", "text": text}],
    }
    r = requests.post(url, headers=headers, json=body, timeout=10)
    if r.status_code >= 300:
        raise RuntimeError(f"LINE push error {r.status_code}: {r.text}")


# ===============================
# Message Builder
# ===============================
def _format_line_message(
    symbol: str,
    tf: str,
    result: Dict,
    last_close: float,
    atr_pct: Optional[float],
    watch_dn: Optional[float],
    watch_up: Optional[float],
) -> str:
    """
    result ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ: result["probs"] = {"UP": x, "DOWN": y, "SIDE": z}
                  result["best"] = {"direction": "UP"/"DOWN"/"SIDE", "reason": "..."}
                  result["targets"] (‡∏≠‡∏≤‡∏à‡∏°‡∏µ), result["stop"] (‡∏≠‡∏≤‡∏à‡∏°‡∏µ)
    ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ó‡∏ô‡∏ó‡∏≤‡∏ô ‡∏ñ‡πâ‡∏≤ key ‡∏ö‡∏≤‡∏á‡∏≠‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏∞‡∏Ç‡πâ‡∏≤‡∏°‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏†‡∏≤‡∏û
    """
    probs = result.get("probs", {})
    best = result.get("best", {}) or {}
    direction = best.get("direction", "?")
    reason = best.get("reason", "")
    targets = result.get("targets", []) or []
    stop = result.get("stop", None)

    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ targets/stop ‡∏•‡∏≠‡∏á fallback ‡πÄ‡∏õ‡πá‡∏ô % ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
    if not targets and last_close:
        targets = [round(last_close * (1 + p), 2) if direction == "UP" else round(last_close * (1 - p), 2) for p in TP_PCTS]
    if stop is None and last_close:
        stop = round(last_close * (1 - SL_PCT), 2) if direction == "UP" else round(last_close * (1 + SL_PCT), 2)

    lines = []
    lines.append(f"üß† Signal ‚Ä¢ {symbol} ‚Ä¢ {tf}")
    lines.append(f"‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {last_close:,.2f}")
    if probs:
        lines.append(f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô % ‚Üí ‚¨ÜÔ∏èUP {probs.get('UP','-')} | ‚¨áÔ∏èDOWN {probs.get('DOWN','-')} | ‚û°Ô∏èSIDE {probs.get('SIDE','-')}")
    lines.append(f"‡πÅ‡∏ú‡∏ô‡∏´‡∏•‡∏±‡∏Å: {direction}")
    if reason:
        lines.append(f"‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏¢‡πà‡∏≠: {reason}")

    if targets:
        if direction == "UP":
            lines.append("üéØ TP: " + " / ".join(f"{t:,.2f}" for t in targets))
        elif direction == "DOWN":
            lines.append("üéØ TP: " + " / ".join(f"{t:,.2f}" for t in targets))
    if stop:
        lines.append(f"üõë SL: {stop:,.2f}")

    if atr_pct is not None:
        lines.append(f"ATR‚âà{atr_pct*100:.2f}%")
    if watch_dn and watch_up:
        lines.append(f"üî≠ Watch: {watch_dn:,.2f} ‚Üî {watch_up:,.2f}")

    lines.append("‚Äª ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏ç‡∏≤‡∏ì‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°")
    return "\n".join(lines)


# ===============================
# Main
# ===============================
def main():
    parser = argparse.ArgumentParser(description="Generate trade signal and optionally push to LINE.")
    parser.add_argument("--symbol", default="BTCUSDT")
    parser.add_argument("--tf", default="1D")
    parser.add_argument("--profile", default="baseline")
    parser.add_argument("--to", default="", help="LINE User ID (override LINE_USER_ID)")
    args = parser.parse_args()

    # 1) ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤
    df = get_data(args.symbol, args.tf)
    if df is None or df.empty:
        print("ERROR: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤")
        sys.exit(1)

    last_close = float(df["close"].iloc[-1])
    atrp = _atr_pct(df, n=14)
    wdn, wup = _watch_levels_from_atr(last_close, atrp, k=1.5)

    # 2) ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå scenarios
    #    ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á: dict ‡∏ó‡∏µ‡πà‡∏°‡∏µ probs/best/targets/stop ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô
    result = analyze_scenarios(df=df, symbol=args.symbol, tf=args.tf)

    # 3) ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    text = _format_line_message(
        symbol=args.symbol,
        tf=args.tf,
        result=result,
        last_close=last_close,
        atr_pct=atrp,
        watch_dn=wdn,
        watch_up=wup,
    )

    # 4) ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡∏°‡∏¥‡∏ô‡∏±‡∏•‡πÄ‡∏™‡∏°‡∏≠
    print("\n" + "=" * 8 + " SIGNAL " + "=" * 8)
    print(text)
    print("=" * 24 + "\n")

    # 5) ‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤ LINE ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ
    if _can_send_line():
        try:
            to_user = args.to.strip() or None
            _push_line_text(text, to_user=to_user)
            print("‚úÖ Pushed to LINE")
        except Exception as e:
            print(f"‚ùå LINE push failed: {e}")
            sys.exit(2)


if __name__ == "__main__":
    main()
